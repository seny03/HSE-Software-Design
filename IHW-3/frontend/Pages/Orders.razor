@page "/orders"
@using System.Net.Http
@using System.Net.Http.Json
@using frontend.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.Toast.Services
@inject HttpClient Http
@inject IToastService ToastService

<h3>Orders</h3>

<div>
    <h4>Create Order</h4>
    <div class="mb-3">
        <input @bind="userId" placeholder="User ID" />
    </div>
    
    <div class="mb-3">
        <h5>Select Products</h5>
        @if (products != null && products.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in products)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" @bind="product.IsSelected" />
                            </td>
                            <td>@product.Name</td>
                            <td>$@product.Price</td>
                            <td>
                                <input type="number" min="1" max="10" @bind="product.Quantity" disabled="@(!product.IsSelected)" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <button @onclick="LoadProducts">Load Products</button>
        }
    </div>
    
    <button @onclick="CreateOrder" class="btn btn-primary">Create Order</button>
</div>

<div class="mt-4">
    <h4>Get Orders</h4>
    <input @bind="getOrdersUserId" placeholder="User ID" />
    <button @onclick="GetOrders">Get Orders</button>
    @if (orders != null)
    {
        <ul>
            @foreach (var order in orders)
            {
                <li>@order.Id - <span id="@($"status-{order.Id}")">@order.Status</span> - @order.TotalAmount</li>
            }
        </ul>
    }
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

@code {
    private string userId;
    private string getOrdersUserId;
    private List<Order> orders;
    private List<ProductViewModel> products;
    private string message;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5000/orderStatusHub")
            .Build();

        hubConnection.On<Guid, string>("OrderStatusChanged", (orderId, status) =>
        {
            var order = orders?.FirstOrDefault(o => o.Id == orderId);
            if (order != null)
            {
                order.Status = Enum.Parse<OrderStatus>(status);
                ToastService.ShowInfo($"Order {orderId} status changed to {status}");
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var response = await Http.GetAsync("http://localhost:5000/products");
            if (response.IsSuccessStatusCode)
            {
                var productList = await response.Content.ReadFromJsonAsync<List<Product>>();
                products = productList.Select(p => new ProductViewModel
                {
                    Id = p.Id,
                    Name = p.Name,
                    Price = p.Price,
                    IsSelected = false,
                    Quantity = 1
                }).ToList();
                
                message = products.Any() ? "Products loaded successfully." : "No products found.";
            }
            else
            {
                message = $"Failed to load products. Status: {response.StatusCode}";
                products = null;
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading products: {ex.Message}";
            products = null;
        }
    }

    private async Task CreateOrder()
    {
        if (Guid.TryParse(userId, out var guid))
        {
            if (products == null || !products.Any())
            {
                message = "Please load products first.";
                return;
            }

            var selectedProducts = products.Where(p => p.IsSelected && p.Quantity > 0).ToList();
            if (!selectedProducts.Any())
            {
                message = "Please select at least one product.";
                return;
            }

            var orderItems = selectedProducts.Select(p => new
            {
                ProductId = p.Id,
                Quantity = p.Quantity
            }).ToArray();

            var newOrder = new
            {
                UserId = guid,
                Items = orderItems
            };

            var response = await Http.PostAsJsonAsync("http://localhost:5000/orders", newOrder);
            if (response.IsSuccessStatusCode)
            {
                var createdOrder = await response.Content.ReadFromJsonAsync<Order>();
                await hubConnection.SendAsync("JoinOrderGroup", createdOrder.Id.ToString());
                message = "Order created successfully.";
                if(orders is null) orders = new();
                orders.Add(createdOrder);
                
                // Reset selections
                foreach (var product in products)
                {
                    product.IsSelected = false;
                    product.Quantity = 1;
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Failed to create order. Status: {response.StatusCode}. Error: {errorContent}";
            }
        }
        else
        {
            message = "Invalid User ID format.";
        }
    }

    private async Task GetOrders()
    {
        if (Guid.TryParse(getOrdersUserId, out var guid))
        {
            var response = await Http.GetAsync($"http://localhost:5000/orders?userId={guid}");
            if (response.IsSuccessStatusCode)
            {
                orders = await response.Content.ReadFromJsonAsync<List<Order>>();
                foreach(var order in orders)
                {
                    await hubConnection.SendAsync("JoinOrderGroup", order.Id.ToString());
                }
                message = orders.Any() ? "" : "No orders found.";
            }
            else
            {
                message = "Failed to get orders.";
                orders = null;
            }
        }
        else
        {
            message = "Invalid User ID format.";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    
    public class ProductViewModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public bool IsSelected { get; set; }
        public int Quantity { get; set; } = 1;
    }
} 